buildscript {
	ext {
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.8.12'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.widowvm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
}


dependencies {
	compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-starter-cache')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-groovy-templates')
	//compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.retry:spring-retry')
	compile('org.springframework.session:spring-session-core')
	compile('org.apache.directory.studio:org.apache.commons.io:2.4')
	compile 'org.apache.httpcomponents:httpclient:4.5.5'
	compile 'org.apache.httpcomponents:httpcore:4.4.1'
	runtime('org.springframework.boot:spring-boot-devtools')
	compileOnly('org.springframework.boot:spring-boot-configuration-processor')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
	//testCompile('org.springframework.security:spring-security-test')
	testCompile 'org.mockito:mockito-core:2.7.22'
}




task createTestVms {

	doLast {

		exec {
			ignoreExitValue = true
			commandLine 'virt-install', '--name', 'deleteVm1', '--ram', '512', '--disk',
					'path=/var/lib/libvirt/images/deleteVm1,size=4', '--vcpus', '1', '--os-type', 'linux',
					'--os-variant', 'ubuntuprecise', '--network', 'bridge=virbr0', '--graphics', 'none',
					'--console', 'pty,target_type=serial', '--location',
					'http://jp.archive.ubuntu.com/ubuntu/dists/precise/main/installer-amd64/',
					'--extra-args', 'console=ttyS0'
		}

		exec {
			ignoreExitValue = true
			commandLine 'virt-install', '--name', 'deleteVm2', '--ram', '512', '--disk',
					'path=/var/lib/libvirt/images/deleteVm2,size=4', '--vcpus', '1', '--os-type', 'linux',
					'--os-variant', 'ubuntuprecise', '--network', 'bridge=virbr0', '--graphics', 'none',
					'--console', 'pty,target_type=serial', '--location',
					'http://jp.archive.ubuntu.com/ubuntu/dists/precise/main/installer-amd64/',
					'--extra-args', 'console=ttyS0'
		}


		exec {
			ignoreExitValue = true
			commandLine 'virt-install', '--name', 'listVm1', '--ram', '512', '--disk',
					'path=/var/lib/libvirt/images/listVm1,size=4', '--vcpus', '1', '--os-type', 'linux',
					'--os-variant', 'ubuntuprecise', '--network', 'bridge=virbr0', '--graphics', 'none',
					'--console', 'pty,target_type=serial', '--location',
					'http://jp.archive.ubuntu.com/ubuntu/dists/precise/main/installer-amd64/',
					'--extra-args', 'console=ttyS0'
		}


		exec {
			ignoreExitValue = true
			commandLine 'virt-install', '--name', 'statusVm', '--ram', '512', '--disk',
					'path=/var/lib/libvirt/images/statusVm,size=4', '--vcpus', '1', '--os-type', 'linux',
					'--os-variant', 'ubuntuprecise', '--network', 'bridge=virbr0', '--graphics', 'none',
					'--console', 'pty,target_type=serial', '--location',
					'http://jp.archive.ubuntu.com/ubuntu/dists/precise/main/installer-amd64/',
					'--extra-args', 'console=ttyS0'
		}
	}
}

task deleteKickstart(type: Delete) {
	def dirName = "kickstart"
	file( dirName ).list().each{
		f ->
			delete "${dirName}/${f}"
	}
}

task killAllVms(dependsOn : 'killTempVms'){
	doLast {
		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'destroy', 'listVm1'
		}
		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'undefine', 'listVm1'
		}

		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'destroy', 'statusVm'
		}
		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'undefine', 'statusVm'
		}
	}
}

task killTempVms{
	doLast {
		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'destroy', 'createVm'
		}
		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'undefine', 'createVm'
		}

		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'destroy', 'deleteVm1'
		}
		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'undefine', 'deleteVm1'
		}

		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'destroy', 'deleteVm2'
		}
		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'undefine', 'deleteVm2'
		}
		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'destroy', 'skjd'
		}
		exec {
			ignoreExitValue = true
			commandLine 'virsh', 'undefine', 'skjd'
		}
	}
}

clean << {
    def dirName = "kickstart"
    file( dirName ).list().each{
        f ->
            delete "${dirName}/${f}"
    }
}


